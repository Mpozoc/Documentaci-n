orangeec <- read.csv("~/Documents/GitHub/Orange-Economy/orangeec.csv", header=FALSE)
View(orangeec)
4+8
2-1
View(orangeec)
View(orangeec)
View(orangeec)
e = matrix(1:4,2,2)
# Para comentarios
# Declarar Variables
a = 1
b = "Hola"
c=TRUE
d= c(1:10)
class(e)
#### CONTROL 2 individual
#### Manuel Pozo Cabello RUT: 15358191-6
#### Objetivo: Utilice su conocimiento experto de los sandwiches y la
#### data de sanguchez para dise?ar la receta del mejor sandwich del mundo.
####
#### Para esto deberá responder distintas preguntas:
####    1.  Que significa "el mejor sandwich del mundo"?
####        mejor Ingrediente Principal + mejores acompanamientos
####    2.  Cuantos ingredientes va a tener su receta?
####        Promedio de acompañamientos utilizados + ingrediente principal
####    3.  ?Que ingredientes van a ser utilizados?
####        Respuesta esta al final del código
# 0. Cargamos datos y librerías
setwd("/Users/manuelpozo/documents/magister/Programación R")
dataset = read.table("sanguchez.csv",sep=";", header = T, encoding="latin1")
library("quanteda")
library("ggplot2")
# 1. Armo tabla para trabajar con datos que importan y que esten lo mas limipios posibles#######################
## 1.1 Rescatamos datos con los que vamos a trabajar receta
dataset$id = row.names(dataset)
data_receta = dataset[,c("Ingredientes","nota","Precio","id")]
data_receta = data_receta [complete.cases(data_receta ),]
## 1.2 Limpieza básica datos de origen
### 1.2.1 campo Precios
data_receta$Precio<-gsub( "[$]","",data_receta$Precio)
data_receta$Precio<-gsub( "[.]","",data_receta$Precio)
data_receta$Precio=trimws(data_receta$Precio, which = "left")
### 1.2.2 campo Precioscampo Ingredienes
data_receta$Ingredientes  = as.character(data_receta$Ingredientes)
data_receta$Ingredientes = gsub( "~",",",data_receta$Ingredientes)
data_receta$Ingredientes = gsub( " y ",",",data_receta$Ingredientes) ## lo vamos a utilizar para separar acompañamientos
data_receta = data_receta [complete.cases(data_receta ),]
## 1.3 Construir nuevos campos de la tabla
### 1.3.1 Inicializo variables
Paridad_Precio=NULL
vector_ingre =NULL
cant_acompanamientos =NULL
Ingrediente_Principal =NULL
precio_ingr_principal=NULL
Acompañamientos  =NULL
precio_acompanamientos =NULL
Ingrediente_Principal=NULL
Precio_Ingrediente_Principal=NULL
Acompañamientos =NULL
Cantidad_Acompañamientos =NULL
Precio_Acompañamientos =NULL
### 1.3.2 Utilizo un for para ir sacando valores de vector y armar nuevos campos para mi data receta
for (i in 1:nrow(data_receta)){
### 1.3.3 Paridad de Precios
cant_plata=0
tipo_mon="   "
cant_ingr=0
cant_plata= substr(strsplit(data_receta$Precio," ")[[i]][1],1,5)
cant_plata=as.numeric(cant_plata)
tipo_mon= substr(strsplit(data_receta$Precio," ")[[i]][2],1,3)
tipo_mon_val=is.na(tipo_mon)
if(tipo_mon_val == TRUE ){
Paridad_Precio= rbind(Paridad_Precio, cant_plata )
}else{
if (tipo_mon== "USD"){
Paridad_Precio = rbind(Paridad_Precio, cant_plata*700 ) #para Dólares dejamos cambio en $700
}
else{
if(cant_plata > 100){
Paridad_Precio = rbind(Paridad_Precio, cant_plata) #son pesos, pero paso primera validación
}else{
Paridad_Precio = rbind(Paridad_Precio, cant_plata*1000 ) #para el resto de monedas, suponemos  cambio de $1000
}
}
}
### 1.3.4 Separación Ingrediente Principal de acompanamientos
vector_ingre <- strsplit(data_receta$Ingredientes , ",")[[i]]
#### 1.3.4.1 Datos Ingrediente principal
Ingrediente_Principal_unitario = vector_ingre[1]
precio_ingr_principal=Paridad_Precio[i]/2 ### La mitad del precio total se la asigno a Ingrediente principal
precio_ingr_principal=as.numeric(precio_ingr_principal)
#### 1.3.4.2 Datos Acompañamientos
cant_acompanamientos =length(vector_ingre) - 1 #### Menos ingrediente Principal
cant_acompanamientos=as.numeric(cant_acompanamientos)
acompanamientos = vector_ingre
acompanamientos = vector_ingre[-(1:1)]
acompanamientos = as.data.frame(acompanamientos)
acompanamientos_char=NULL
for (f in 1:nrow(acompanamientos)){
acompanamientos_char= paste(acompanamientos_char,acompanamientos[f,1], sep=",")
}
#### 1.3.4.3 Acumulamos en vectores
acompanamientos_char=as.character(acompanamientos_char)
precio_acompanamientos =Paridad_Precio[i]/2/cant_acompanamientos  ### La otra mitad del precio total la distribuyo entre acompañamientos
precio_acompanamientos=as.numeric(precio_acompanamientos)
Ingrediente_Principal= rbind(Ingrediente_Principal,Ingrediente_Principal_unitario )
Precio_Ingrediente_Principal= rbind(Precio_Ingrediente_Principal,precio_ingr_principal )
Acompañamientos= rbind(Acompañamientos,acompanamientos_char)
Cantidad_Acompañamientos = rbind(Cantidad_Acompañamientos,cant_acompanamientos)
Precio_Acompañamientos = rbind(Precio_Acompañamientos, precio_acompanamientos)
}
### 1.3.5 Volcamos valores en nuestra tabla
data_receta = cbind(data_receta, Paridad_Precio)
data_receta = cbind(data_receta, Ingrediente_Principal)
data_receta = cbind(data_receta, Precio_Ingrediente_Principal)
data_receta = cbind(data_receta, Cantidad_Acompañamientos)
data_receta = cbind(data_receta, Precio_Acompañamientos )
data_receta = cbind(data_receta, Acompañamientos)
data_receta = data_receta [complete.cases(data_receta ),]
# 2. Tokenizamos palabras de ingredientes y acompañamientos ###############################################
## 2.1 Tokenizamos Ingrediente Principal
Ingredientes_principales = data_receta[,c("Ingrediente_Principal","Precio_Ingrediente_Principal","nota","id")]
colnames(Ingredientes_principales)[1] = "text"
Ingredientes_principales$text = as.character(Ingredientes_principales$text)
matriz_documento_atributo_ip <- tokens(corpus(Ingredientes_principales), what = "word", remove_numbers=TRUE, remove_symbols=TRUE, remove_separators=TRUE, remove_punct=TRUE)  %>%
tokens_remove(stopwords("spanish"), padding  = TRUE) %>%
tokens_ngrams(n = 2) %>% ### Tien mas sentido bigrama en este caso
trimws( which = "both")   %>%
iconv(from="UTF-8",to='ASCII//TRANSLIT') %>%
tolower() %>%
dfm()
### 2.1.1 Pequeña validación
textplot_wordcloud( matriz_documento_atributo_ip  ,min_count = 2,
color = c('red', 'pink', 'green', 'purple', 'orange', 'blue'))
## 2.2 Tokenizamos Acompañamientos
ingre_acompa = data_receta[,c("Acompañamientos","Precio_Acompañamientos","nota","id")]
colnames(ingre_acompa)[1] = "text"
ingre_acompa$text = as.character(ingre_acompa$text)
matriz_documento_atributo_a <- tokens(corpus(ingre_acompa), what = "word", remove_numbers=TRUE, remove_symbols=TRUE, remove_separators=TRUE, remove_punct=TRUE)  %>%
tokens_remove(stopwords("spanish"), padding  = TRUE) %>%
tokens_ngrams(n = 1) %>%
trimws( which = "both")   %>%
iconv(from="UTF-8",to='ASCII//TRANSLIT') %>%
tolower() %>%
dfm()
### 2.2.1 Acá si van con word steam porque datos están juntos
matriz_documento_raiz_a =  dfm_wordstem(matriz_documento_atributo_a,language = "spanish")
nombres_columnas = data.frame(colnames(matriz_documento_atributo_a))
colnames(nombres_columnas) = "Ingr_por_separado"
nombres_columnas$Ingr_por_separado = as.character(nombres_columnas$Ingr_por_separado)
nombres_columnas$frecuencia = colSums(matriz_documento_atributo_a)
nombres_columnas$raiz = char_wordstem(nombres_columnas$Ingr_por_separado,language="spanish")
nombres_columnas = nombres_columnas[order(nombres_columnas$raiz,-nombres_columnas$frecuencia),]
nombres_columnas$anterior = c(0,nombres_columnas$raiz[-nrow(nombres_columnas)])
nombres_columnas$mayor_freq = 1
nombres_columnas[nombres_columnas$raiz == nombres_columnas$anterior,]$mayor_freq = 0
nombres_columnas = nombres_columnas[nombres_columnas$mayor_freq == 1,]
nombres_columnas2 = data.frame(colnames(matriz_documento_raiz_a))
colnames(nombres_columnas2) = "raiz"
nombres_columnas2$id = 1:ncol(matriz_documento_raiz_a)
nombres_columnas2 = merge(nombres_columnas2,nombres_columnas,by="raiz")
nombres_columnas2 = nombres_columnas2[order(nombres_columnas2$id),]
colnames(matriz_documento_raiz_a) = nombres_columnas2$Ingr_por_separado
### 2.2.2 Pequeña validación
textplot_wordcloud( matriz_documento_raiz_a  ,min_count = 8,
color = c('red', 'pink', 'green', 'purple', 'orange', 'blue'))
# 3. Relacionamos palabras tokenizadas con notas y precios ###################################################
## 3.1 Relacion Ingrediente Principal
### 3.1.1 Cruzo Palabras con Nota y precio - Ingrediente Principal
matrix_nota_atrib_ip = (matriz_documento_atributo_ip * Ingredientes_principales$nota)
matrix_precio_atrib_ip = (matriz_documento_atributo_ip * Ingredientes_principales$Precio_Ingrediente_Principal)
### 3.1.2 Relacionamos ingredientes/notas
ing_prin_clean = as.data.frame(colnames(matrix_nota_atrib_ip))
colnames(ing_prin_clean) = "Ingrediente_Principal"
ing_prin_clean$ocurrencias = colSums(matriz_documento_atributo_ip)
ing_prin_clean$nota = colSums(matrix_nota_atrib_ip)
ing_prin_clean$nota = ing_prin_clean$nota / ing_prin_clean$ocurrencias
### 3.1.3 Relacionamos Precio/Ingrediente principal
precio_ing_prin_clean = as.data.frame(colnames(matrix_precio_atrib_ip))
colnames(precio_ing_prin_clean) = "Ingrediente_Principal"
precio_ing_prin_clean$precio = colSums(matrix_precio_atrib_ip)
precio_ing_prin_clean$precio  = precio_ing_prin_clean$precio  / ing_prin_clean$ocurrencias
### 3.1.4 Cruzamos Precio-Nota/Ingrediente principal
tabla_final_ingr_principal=merge(ing_prin_clean,precio_ing_prin_clean, by="Ingrediente_Principal")
## 3.2 Relacion Acompañamientos
### 3.2.1 Cruzo Palabras con Nota y precio - Acompañamientos
matrix_nota_raiz_a = (matriz_documento_raiz_a * ingre_acompa$nota)
matrix_precio_raiz_a = (matriz_documento_raiz_a * ingre_acompa$Precio_Acompañamientos)
### 3.2.2 Relacionamos ingredientes/notas - Acompañamientos
ing_acom_clean = as.data.frame(colnames(matrix_nota_raiz_a))
colnames(ing_acom_clean) = "Acompañamientos"
ing_acom_clean$ocurrencias = colSums(matriz_documento_raiz_a)
ing_acom_clean$nota = colSums(matrix_nota_raiz_a)
ing_acom_clean$nota = ing_acom_clean$nota / ing_acom_clean$ocurrencias
### 3.2.3 Relacionamos Precio / Acompañamientos
precio_acompa_clean = as.data.frame(colnames(matrix_precio_raiz_a))
colnames(precio_acompa_clean) = "Acompañamientos"
precio_acompa_clean$precio = colSums(matrix_precio_raiz_a)
precio_acompa_clean$precio  = precio_acompa_clean$precio  / ing_acom_clean$ocurrencias
### 3.2.4 Cruzamos Precio-Nota/Ingrediente principal
tabla_final_acompa=merge(ing_acom_clean, precio_acompa_clean, by="Acompañamientos")
# 4. Validamos gráficamente cuales son mejores ingredientes y acompañamientos ###############################
## 4.1 Validamos mejor Ingrediente Principal
### 4.1.1 Ordenamos por nota
tabla_final_ingr_principal$Ingrediente_Principal <- factor(tabla_final_ingr_principal$Ingrediente_Principal,
levels =tabla_final_ingr_principal$Ingrediente_Principal[order(-tabla_final_ingr_principal$nota)])
### 4.1.2 Validación gráfica Ingrediente Principal
ggplot(tabla_final_ingr_principal[tabla_final_ingr_principal$ocurrencias>2,], aes(nota,Ingrediente_Principal )) +
geom_point(aes(size=precio))
### 4.1.3 Decisión Ingrediente Principal
#### Mejor Ingrediente principal es el que tiene mejor nota (con un minimo de ocurrencia) y menor precio.
#### En este caso, la Hamburguesa Casera
## 4.2 Validamos mejor Acompañamiento
### 4.2.1 Ordenamos por nota
tabla_final_acompa$Acompañamientos <- factor(tabla_final_acompa$Acompañamientos,
levels =tabla_final_acompa$Acompañamientos[order(-tabla_final_acompa$nota)])
### 4.2.2 Validación gráfica Acompañamiento
ggplot(tabla_final_acompa[tabla_final_acompa$nota>4 & tabla_final_acompa$ocurrencias>2 ,], aes(nota,Acompañamientos)) +
geom_point(aes(size=ocurrencias))
### 4.2.3 Cantidad adecuada de acompañamientos
cant_adecuada_acompañamientos = 0
cant_adecuada_acompañamientos = mean(data_receta$Cantidad_Acompañamientos)
cant_adecuada_acompañamientos = floor(cant_adecuada_acompañamientos )
cant_adecuada_acompañamientos
### 4.1.3 Decisión Acompañamientos
#### Mejores acompañamientos son los que tienen mejor nota y con al menos 3 ocurrencias.
#### La cantidad adecuada de acompañamientos es el promedio aproximado a entero, en este caso 4
#### Los acompañamientos elegidos son Portobello, chipottle, ricotta y tostado (tostaremos el pan de la hamburguesa)
# 5. Receta:
## Hamburguesa casera en pan tostado con ricotta, chipottle y portobello
textplot_wordcloud( matriz_documento_raiz_a  ,min_count = 8,
color = c('red', 'pink', 'green', 'purple', 'orange', 'blue'))
View(data_receta)
View(dataset)
View(data_receta)
textplot_wordcloud( matriz_documento_atributo_ip  ,min_count = 2,
color = c('red', 'pink', 'green', 'purple', 'orange', 'blue'))
ggplot(tabla_final_acompa[tabla_final_acompa$nota>4 & tabla_final_acompa$ocurrencias>2 ,], aes(nota,Acompañamientos)) +
geom_point(aes(size=ocurrencias))
ggplot(tabla_final_ingr_principal[tabla_final_ingr_principal$ocurrencias>2,], aes(nota,Ingrediente_Principal )) +
geom_point(aes(size=precio))
View(matrix_nota_atrib_ip)
str(matrix_nota_atrib_ip)
